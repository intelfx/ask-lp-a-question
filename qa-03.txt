Q:
What was the reasoning behind the systemd versioning 217, 218 instead of 2.34.1 etc.? Wouldn't the traditional scheme make it easier to identify big changes, maybe API changes etc.? Anything special planed for 666? Merge into the kernel perhaps?

Any progress on the "revisting on how we put together distros" front?

A:
We  kinda wanted to have a steady stream of releases with small changes  rather than fewer releases with big changes. Hence, the simple, linear  versioning scheme. Our intention is actually to do a new release every  2-3 weeks, but currently we are not particularly good at keeping that  pace up... We try to be very conservative with API breakages, as soon as  we marked an API stable...
666 is a long way out still. Ask me again closer to the release of v666!
Regarding progress on the put together distro stuff: we are working  on many smaller building blocks currently, like kdbus, and that'll still  take a while.

----

Q:
В чём причина того, что systemd отошёл от традиционной схемы версионирования с несколькими компонентами (например, "2.34.1")? Это позволило бы легче узнавать релизы с большим количеством изменений -- или те, в которых меняется API.

Есть ли особые планы на версию 666? Объединить код с ядром, например?

Как обстоят дела с новым подходом к организации дистрибутивов [речь о http://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html -- прим. пер.]?

A:
Мы бы хотели стремиться к частому выпуску новых версий с относительно небольшим количеством изменений в каждой. Именно поэтому нумерация версий у нас линейная. На самом деле, наша цель -— новый релиз каждые 2-3 недели, но сейчас у нас не очень получается. Насчёт API -- мы пытаемся быть очень консервативными в вопросах сохранения обратной совместимости (разумеется, только тех интерфейсов, что помечены как стабильные). А до версии 666 ещё далеко, так что спросите меня об этом поближе к релизу!

Относительно нового подхода к построению дистрибутивов: мы в настоящее время работаем над вещами из более низких слоёв (например, над kdbus), и нам потребуется некоторое время, чтобы с ними всё закончить.

