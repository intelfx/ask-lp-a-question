Q:
What kind of work loads or use cases would you foresee benefiting from performance gains once kdbus has been merged?

A:
kdbus  is primarilly interesting for the folks who work in the lower layers of  the stack, such as developers. On the systemd-side it comes with a new  set of tooling that hopefully opens up dbus to admins a bit more (by  making it easier to invoke/query the bus from scripts for example),  however strictly speaking that's not really a feature of kdbus itself...
If we do everything right, then very little should change for users or workloads.

----

Q:
В каких юзкейсах будет наиболее заметно то увеличение производительности, которое привнесёт kdbus после своего внедрения? Какие виды нагрузок выиграют больше всего?

A:
kdbus прежде всего является интересным для тех людей, которые работают в нижних слоях программного обеспечения. На стороне systemd к kdbus прилагается новый набор инструментов, который, как мы надеемся, лучше раскроет возможности dbus для системных администраторов (например, упростит взаимодействие с шиной из скриптов), однако, строго говоря, это не особенность kdbus как такового. Если мы сделаем все правильно, то для пользователей очень мало что должно измениться.

[Когда kdbus был впервые представлен, упоминалось, что преимущества в плане производительности будут наиболее заметны во встраиваемых системах -- например, в автомобильных -- и вообще там, где через шину передаётся очень большое количество сообщений. Типичные десктопы, равно как и серверы, такой особенностью не обладают, и преимущества ожидаются исключительно структурные. -- прим. пер.]